import Despot from "../util/Despot";
import Recorder from "./visuals/recorder";
import Replay from "./visuals/replay";
import { UnloadParams } from "./container";
import { VideomailClientOptions } from "../types/options";
import VideomailError from "../util/error/VideomailError";
import { ShowParams } from "../client";
declare class Visuals extends Despot {
    private readonly container;
    private replay;
    private recorder;
    private recorderInsides;
    private notifier;
    private visualsElement?;
    private built;
    constructor(container: any, options: VideomailClientOptions);
    private buildNoScriptTag;
    private buildChildren;
    private initEvents;
    private correctDimensions;
    private removeDimensions;
    getRatio(): number;
    private isRecordable;
    isCountingDown(): boolean | undefined;
    build(playerOnly?: boolean, parentElement?: HTMLElement | null): void;
    appendChild(child: HTMLElement): void;
    removeChild(child: HTMLElement): void;
    reset(): void;
    beginWaiting(): void;
    endWaiting(): void;
    stop(params?: any): void;
    back(keepHidden?: boolean, cb?: any): void;
    recordAgain(): void;
    unload(params?: UnloadParams): void;
    isNotifying(): boolean | null | undefined;
    pause(params?: {
        event: MouseEvent;
    }): void;
    resume(): void;
    pauseOrResume(): void;
    recordOrStop(): void;
    getRecorder(): Recorder;
    validate(): boolean;
    getRecordingStats(): import("..").RecordingStats | undefined;
    getAudioSampleRate(): number | undefined;
    isPaused(): boolean | undefined;
    error(err: VideomailError): void;
    hide(): void;
    isHidden(): any;
    showVisuals(): void;
    show(params?: ShowParams): void;
    showReplayOnly(): void;
    isRecorderUnloaded(): boolean | undefined;
    isConnecting(): boolean;
    getRecorderWidth(responsive: boolean): number | undefined;
    getRecorderHeight(responsive: boolean, useBoundingClientRect?: boolean): number | undefined;
    limitWidth(width?: number): number | undefined;
    limitHeight(height: number): number;
    getReplay(): Replay;
    getBoundingClientRect(): DOMRect | undefined;
    checkTimer(elapsedTime: number): void;
    isNotifierBuilt(): boolean;
    isReplayShown(): boolean;
    hideReplay(): void;
    hideRecorder(): void;
    isRecording(): any;
    isUserMediaLoaded(): boolean | undefined;
    isConnected(): boolean;
    record(): void;
    getElement(): HTMLElement | null | undefined;
}
export default Visuals;
